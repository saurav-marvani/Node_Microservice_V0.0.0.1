let express,createError,morgan,dotenv,JWT,fs,compression;_b81‍.w("express",[["default",["express"],function(v){express=v}]]);_b81‍.w("http-errors",[["default",["createError"],function(v){createError=v}]]);_b81‍.w("morgan",[["default",["morgan"],function(v){morgan=v}]]);_b81‍.w("dotenv",[["default",["dotenv"],function(v){dotenv=v}]]);_b81‍.w("jsonwebtoken",[["default",["JWT"],function(v){JWT=v}]]);_b81‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_b81‍.w("compression",[["default",["compression"],function(v){compression=v}]]);



dotenv.config();




const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(compression());
app.use(morgan('dev'));
app.use(express.static('public'));


app.get('/login', async (req, res, next) => {
    // assuming login checks is done and then issue a JWT.
    try {
        const secret = fs.readFileSync('./certs/private.pem')
        const token = JWT.sign({}, secret, { expiresIn: '10min', algorithm: 'RS256' })
        res.send({ token });
    } catch (err) {
        createError.BadRequest(err);
    }
});

app.use((req, res, next) => {
    next(createError.NotFound());
});

app.use((err, req, res, next) => {
    res.status(err.status || 500);
    res.send({
        status: err.status || 500,
        message: err.message,
    });
});

const PORT = process.env.PORT || 4000;
app.listen(PORT, () => console.log(`🚀 @ http://localhost:${PORT}`));

